{"version":3,"sources":["components/Container/index.js","components/Header/index.js","components/Navbar/index.js","components/Box/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","Header","Navbar","title","rules","score","topScore","Box","key","id","src","image","alt","name","onClick","checkBox","backup","hangul","win","App","state","hangulCopy","Object","toConsumableArray","_this","scoreCopy","topScoreCopy","index","array","i","length","findIndex","console","log","concat","clicked","alert","j","Math","floor","random","_ref","shuffle","setState","_this2","this","components_Navbar","components_Container","components_Header","map","letter","components_Box","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e48cad48.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n  return (\r\n    <div className=\"container bg-light mt-3 p-2 rounded border\">\r\n      {/* <h6>Container is here...</h6> */}\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\nexport default Container;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"bg-secondary rounded p-1\">\r\n      <h1 className=\"text-center\">{props.children}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <ul className=\"nav bg-danger text-white justify-content-center p-2 sticky-top shadow\">\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link font-weight-bold\">{props.title}</span>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link\">{props.rules}</span>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link\">Score: {props.score}</span>\r\n      </li>\r\n      <li className=\"nav-link\">||</li>\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link\">Top Score: {props.topScore}</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Box(props) {\r\n  // confirm data\r\n  // console.log(`Box props: ${props}`);\r\n  return (\r\n    <img key={props.id} src={props.image} className=\"img-thumbnail m-2\" alt={props.name} onClick={() => props.checkBox(props.id)} />\r\n  );\r\n}\r\n\r\nexport default Box;","import React from 'react';\nimport Container from \"./components/Container\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport Box from \"./components/Box\"\nimport hangul from \"./hangul.json\";\n\nconst backup = hangul;\nconst win = 10;\n\n// Functions ===========================================\n\nfunction findIndex(id, array) {\n  let index;\n  // Loops through the hangul array to find the ID\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].id === id) {\n      index = i;\n    }\n  }\n  // console.log(`Index in array: ${index}`);\n  return index;\n}\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\n// React App =============================================\n\nclass App extends React.Component {\n  state = {\n    hangul,\n    score: 0,\n    topScore: 0,\n    backup: hangul\n  };\n\n  checkBox = (id) => {\n    // console.log(`Checked ID: ${id}`);\n    let hangulCopy = [...this.state.hangul];\n    let scoreCopy = this.state.score;\n    let topScoreCopy = this.state.topScore;\n\n    // find the index of the id\n    let index = findIndex(id, this.state.hangul);\n    \n    console.log(`Chosen card is: ${hangulCopy[index].clicked}`);\n\n    // check if the picture has already been clicked.\n    // reset if it has\n    if (hangulCopy[index].clicked === \"true\") {\n      alert(\"You lost... Resetting game\");\n      // reset score, cards and shuffle cards\n      scoreCopy = 0;\n      hangulCopy = [...backup];\n    } else {\n      // if not, change the 'clicked' state of the found letter\n      hangulCopy[index].clicked = \"true\";\n\n      // increment the score and check top score\n      scoreCopy++;\n      if (scoreCopy >= topScoreCopy) {\n        topScoreCopy = scoreCopy;\n      }\n    }\n\n    // check to see if the player won\n    if (scoreCopy === win) {\n      alert(`You won! Resetting game...`);\n      scoreCopy = 0;\n      hangulCopy = [...backup];\n    }\n\n    // mix the cards in the array\n    hangulCopy = shuffle(hangulCopy);\n\n    // update the state\n    this.setState({ hangul: hangulCopy });\n    this.setState({\n      score: scoreCopy,\n      topScore: topScoreCopy\n    });\n\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          title=\"Clicky Game\"\n          rules=\"Click an image to begin\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Container>\n          <Header>Do you know Korean?</Header>\n          {this.state.hangul.map(letter =>\n            <Box\n              id={letter.id}\n              key={letter.id}\n              name={letter.name}\n              image={letter.image}\n              clicked={letter.clicked}\n              checkBox={this.checkBox}\n            />\n          )}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}